1. Midterm will be 3/21
2. Some review of linkedlist



write pseudocode
insert 1 in each list

assume:
class Node {
public:
  Node* next;
  int val
  Node(int v, Node* n)
    { next = n; val =v }
};
// singly linked list
insertafter(p, val) {
  temp = new Node()
  temp.val = val
  temp.next = p.next
  p.next = temp
}

class Node {
public:
  Node* next;
  Node* prev;	
  int val
  Node(int v, Node* n)
    { next = n; val =v }
};
//doubly linked list
insertbefore(p, val) {
  temp = new Node();
  temp.val= val;
  temp.prev = p.prev
  temp.next = p
  p.prev.next = temp 
  p.prev = temp

}

insert2(p, val1, val2)
findandinsertafter(3, 4);


problems:
1. compact list
2. reverse linked list
3. find middle of linked list

list.reverse() {
  for (Node p = head; p != null; p=p.next) { 
    list.addStart(p->val); 
  }
}

list.middle()
  int half = list.size() / 2;
  Node p = head;
  for (int i = 0; i < half; i++, p = p->next)
    ;
  return p->val;
}
// another solution with two pointers, one jumping ahead by 2
// second jumps by 1

1 3 5 7 9  // compact by deleting O(n^2)

                   i
1 3 5 7 9 6 7 8 9
          j

j = 0
for (int i = 0; i < n; i++)
  if (wewant(x[i])
    x[j] = x[i]
    j = j + 1
  end
end

constrainedPrimes(n) // O(n (log n)^2)
  count = 0
  for i = 2 to n
	if isPrime(i) //O(logn)
     	for (int k = 1; k <= n; k *=3) // O(log n )
        if k - 2 == i
     	    count++;
        end
	    end
	end
end


constrainedPrimes2(n) // O(m( log n)^2)
	for (int k = 1; k <= n; k *=3) // O(log n )
    if k - 2 == i	
    	if isPrime(i) //O(k logn)
  	    count++;
      end
    end
end

2.

constrainedPrimes(n) // O(n (log n)^3)
  count = 0
  for i = 2 to n
	if isPrime(i) //O(logn)
     	for (int k = 1; k <= n; k *=3) // O(log n )
				for (int j = 1; j <= k; j *= 2) //O(log n)
          if k - j == i
       	    count++;
            goto next;
          end
	    end
					next: // process next element
	end
end


constrainedPrimes2(n) // O(m(log n)^3)
	for (int k = 1; k <= n; k *=3) // O(log n )
		for (int j = 1; j <= k; j *= 2) //O(log n)
      if k - j == i
       	if isPrime(i) //O(k logn)
    	    count++;
        end
    end
end


fischer-yates(a[])
  for i = a.length-1 down to a.length-1-k
    pick = random(0, i)
    swap(a[i], a[pick])
  end
end


node
  extract(list)
    if (left != null)
      left.extract(list)
    list.add(data)
    if (right != null)
      right.extract(list)
  end

// this doesn't work. A recursive function must call itself
  extract(list)
    if (left != null)
      left.inorder()
    list.add(data)
    if (right != null)
      right.inorder(list)
  end

1 2 3 4 5
1 2 2 4 5


findCommonElements(t1,t2)
  t1.extract(list1)
  t2.extract(list2)
  for i = 0 to list1.length-1
    for j= 0 to list2.length-1
      if list1[i] == list2[j]
         count++
	 break
      end
    end
  end
end


deleteNodes(n)
  if n == null
    return
  deleteNodes(left)
  deleteNodes(right)
  delete n
end



isPrime(n) //O(n)
  for i= 2 to n-1 //O(n)
    if n mod i == 0
      return false
    end
  end
  return true
end



			randomize numbers from 1 to 52

			sort the numbers

			for (int i= 1; i <=52; i++)
				a[i-1] = i;
